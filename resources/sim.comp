#version 430 core

uniform int simulation_width;
uniform int simulation_height;
uniform int simulation_speed;
uniform int sample_distance;
uniform int turn_rate;

#define INDIVIDUALS_PER_INVOCATION 8
#define MAX_INDIVIDUALS 2097152

layout(local_size_x = 32) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
layout(binding = 1) buffer cs_input_data {
    vec4 individuals[MAX_INDIVIDUALS];
};
layout(std430, binding = 2) buffer cs_time {
    float delta;
};

uint hash(uint x) {
    x = ((x >> 16) ^ x) * 0x45d9f3b;
    x = ((x >> 16) ^ x) * 0x45d9f3b;
    x = (x >> 16) ^ x;
    return x;
}

float sample_image(ivec2 pos) {
    float sample_sum = 0.0;
    for(int x = pos.x - 1; x <= pos.x + 1; x ++) {
        for(int y = pos.y - 1; y <= pos.y + 1; y ++) {
            vec3 sample_val = imageLoad(img_output, ivec2(x, y)).rgb;
            sample_sum += sample_val.r + sample_val.g + sample_val.b;
        }
    }
    return sample_sum;
}

void main() {
    for(int i = 0; i < INDIVIDUALS_PER_INVOCATION; i++) {
        vec2 pos = individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].xy;
        float angle = individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z;

        float sample_front = sample_image(ivec2(pos.x + sin(angle) * sample_distance, pos.y + cos(angle) * sample_distance));
        float sample_left = sample_image(ivec2(pos.x + sin(angle - 0.5) * sample_distance, pos.y + cos(angle - 0.5) * sample_distance));
        float sample_right = sample_image(ivec2(pos.x + sin(angle + 0.5) * sample_distance, pos.y + cos(angle + 0.5) * sample_distance));
        uint rand0 = hash(uint(gl_GlobalInvocationID.x + i + pos.x + pos.y * simulation_height));

        if(sample_front > sample_left && sample_front > sample_right) {
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z += 0.0;
        } else if (sample_front < sample_left && sample_front < sample_right) {
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z += ((rand0 / 4294967295.0) - 0.5) * 2.0 * turn_rate * delta;
        } else if (sample_left > sample_right) {
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z -= (rand0 / 4294967295.0) * turn_rate * delta;
        } else if (sample_left < sample_right) {
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z += (rand0 / 4294967295.0) * turn_rate * delta;
        }

        vec2 new_pos = vec2(pos.x + sin(angle) * delta * simulation_speed, pos.y + cos(angle) * delta * simulation_speed);

        /*if (new_pos.x < 0 || new_pos.x >= simulation_width || new_pos.y < 0 || new_pos.y >= simulation_height) {
            uint rand1 = hash(uint(delta) + gl_GlobalInvocationID.x + i);
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z = rand1 / 4294967295.0 * 6.28319;
            new_pos.x = min(simulation_width - 1, max(0, new_pos.x));
            new_pos.y = min(simulation_height - 1, max(0, new_pos.y));
        }*/

        if (new_pos.x < 0) {
            uint rand1 = hash(uint(delta) + gl_GlobalInvocationID.x + i);
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z = rand1 / 4294967295.0 * 3.1415;//6.28319 - individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z;
            new_pos.x = 0;
        }

        if (new_pos.x >= simulation_width) {
            uint rand1 = hash(uint(delta) + gl_GlobalInvocationID.x + i);
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z = rand1 / 4294967295.0 * 3.1415 + 3.1415;//6.28319 - individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z;
            new_pos.x = simulation_width - 1;
        }

        if (new_pos.y < 0) {
            uint rand1 = hash(uint(delta) + gl_GlobalInvocationID.x + i);
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z = rand1 / 4294967295.0 * 3.1415 - 1.57075;//3.1415 - individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z;
            new_pos.y = 0;
        }

        if (new_pos.y >= simulation_height) {
            uint rand1 = hash(uint(delta) + gl_GlobalInvocationID.x + i);
            individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z = rand1 / 4294967295.0 * 3.1415 + 1.57075;//3.1415 - individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].z;
            new_pos.y = simulation_height - 1;
        }

        individuals[gl_GlobalInvocationID.x * INDIVIDUALS_PER_INVOCATION + i].xy = new_pos;
        imageStore(img_output, ivec2(new_pos), vec4(0.0, 0.8, 0.8, 1.0));
    }
}